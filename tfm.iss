; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Talking Flight Monitor"
#define MyAppVersion "0.12"
#define MyAppPublisher "Jason Fayre"
#define MyAppURL "http://www.bvipilots.net"
#define MyAppExeName "ftfm.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{99D752EF-5E4D-4F8A-837D-9FD27B790BAC}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=c:\fs_addons\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=LICENSE.txt
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=tfm
OutputBaseFilename=tfm-install-{AppVersion}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
DisableWelcomePage=no
[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "dist\tfm\tfm.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "dist\tfm\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
[INI]
Filename: "{app}\tfm.ini"; Section: "config"; 
Filename: "{app}\tfm.ini"; Section: "config"; Key: "geonames_username"; String: "jfayre"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "voice_rate"; String: "5"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "speech_output"; String: "0"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "flight_following"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "read_instrumentation"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "read_simconnect"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "read_gpws"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "read_ils"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "read_groundspeed"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "flight_following_interval"; String: "10"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "manual_interval"; String: "5"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "ils_interval"; String: "5"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "config"; Key: "distance_units"; String: "1"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys";
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "command_key"; String: "]"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "agl_key"; String: "g"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "asl_key"; String: "a"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "heading_key"; String: "h"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "ias_key"; String: "s"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "tas_key"; String: "t"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "mach_key"; String: "m"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "vspeed_key"; String: "v"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "airtemp_key"; String: "o"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "trim_key"; String: "shift+t"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "mute_simconnect_key"; String: "Shift+r"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "city_key"; String: "c"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "waypoint_key"; String: "w"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "dest_key"; String: "d"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "attitude_key"; String: "["; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "manual_key"; String: "Ctrl+m"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "director_key"; String: "Ctrl+f"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "toggle_gpws_key"; String: "shift+g"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "toggle_ils_key"; String: "shift+i"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "toggle_flaps_key"; String: "Shift+f"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "message_key"; String: "r"; Flags: createkeyifdoesntexist
Filename: "{app}\tfm.ini"; Section: "hotkeys"; Key: "autopilot_key"; String: "shift+a"; Flags: createkeyifdoesntexist

[code]
var
  UserPage: TInputQueryWizardPage;

procedure InitializeWizard;
begin
  { Create the pages }
  
  UserPage := CreateInputQueryPage(wpWelcome, 'GeoNames information',
  'What is your Geonames user name',
  'For Talking Flight Monitor to read nearest city info,' +
  'you need a username from the GeoNames service.');
UserPage.Add('GeoNames username:', False);
end;
const
  CommentPrefix = ';';

function SetIniComment(
  FileName: string; Section: string; Key: string; Comment: string): Boolean;
var
  Lines: TArrayOfString;
  Line: string;
  InSection: string;
  I, I2, P: Integer;
begin
  Result := False;

  { load INI file lines }
  if LoadStringsFromFile(FileName, Lines) then
  begin
    Log(Format('Read %d lines', [GetArrayLength(Lines)])); 

    { iterate lines to look for the section and key }
    for I := 0 to GetArrayLength(Lines) - 1 do
    begin
      Line := Lines[I];
      { is it a start of a section? }
      if (Length(Line) > 0) and (Line[1] = '[') then
      begin
        P := Pos(']', Line);
        if P > 0 then
        begin
          InSection := Trim(Copy(Line, 2, P - 2));
        end;
      end
        else
      { are we in "our" section }
      if CompareText(InSection, Section) = 0 then
      begin
        P := Pos('=', Line);

        { is it "our" key? }
        if (P > 0) and
           (CompareText(Trim(Copy(Line, 1, P - 1)), Key) = 0) then
        begin
          { if there's already a comment on a previous line, replace it }
          if (Length(Lines[I - 1]) > 0) and
             (Lines[I - 1][1] = CommentPrefix) then
          begin
            Log(Format('Replacing existing comment on line %d', [I - 1]));
            Lines[I - 1] := CommentPrefix + ' ' + Comment;
          end
            else
          begin
            { if there's no comment yet, insert new comment line }
            Log(Format('Inserting comment to line %d', [I]));
            SetArrayLength(Lines, GetArrayLength(Lines) + 1);

            for I2 := GetArrayLength(Lines) - 1 downto I + 1 do
            begin
              Lines[I2] := Lines[I2 - 1];
            end;
            Lines[I] := CommentPrefix + ' ' + Comment;
          end;

          Log(Format('Writing %d lines', [GetArrayLength(Lines)])); 
          Result := SaveStringsToFile(FileName, Lines, False);
          break;
        end;
      end;
    end;
  end;

  if not Result then
  begin
    Log('Section/Key not found');
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  FileName: string;
begin
  if CurStep = ssPostInstall then
  begin
    FileName := ExpandConstant('{app}\tfm.ini');

    SetIniComment(
      FileName, 'config', 'geonames_username', 'flight following requires a username from the geonames service');

    SetIniComment(
      FileName, 'config', 'voice_rate', 'voice rate for SAPI output');
    SetIniComment(
      FileName, 'config', 'speech_output', 'speech output: 0 - screen reader, 1 - sapi5');
    SetIniComment(
      FileName, 'config', 'flight_following', 'read closest city, timezone, and oceanic info.');
    SetIniComment(
      FileName, 'config', 'read_instrumentation', 'automatically read aircraft instrumentation. if using ideal flight, you may want to turn this off.');
    SetIniComment(
      FileName, 'config', 'read_simconnect', 'read simconnect messages. not compatible with fsx and requires latest fsuipc.');
    
  end;
end;